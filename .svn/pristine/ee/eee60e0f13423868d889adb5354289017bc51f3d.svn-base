using MC.NetCore.DomainModels;
using System;
using System.Collections.Generic;
using System.Text;
using MC.NetCore.DomainModels.Dto;
using System.Threading.Tasks;
using MC.NetCore.DataAccessSqlServerProvider;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Text.RegularExpressions;
using MC.NetCore.Common.Extensions;

namespace MC.NetCore.Repository
{
    public class ShopRepository : Repository<Shop>, IShopRepository
    {
        private readonly ShopDbContext _shopDbContext;
        public ShopRepository(ShopDbContext context)
        {
            _shopDbContext = context;
        }

        public async Task<IList<ShopDto>> GetShopList(int? shopId, string shopName)
        {
            try
            {
                var result = new List<ShopDto>();
                result = await (from shop in _shopDbContext.Shop.AsNoTracking()
                                where (shop.CourseTypeIds == "2561" || shop.CourseTypeIds == "2561,")
                                && shop.Astatus == 0 && (!shopId.HasValue || shop.ShopId == shopId)
                                && (string.IsNullOrEmpty(shopName) || shop.ShopName.Contains(shopName))
                                select new ShopDto
                                {
                                    ShopId = shop.ShopId,
                                    ShopName = shop.ShopName,
                                }).ToListAsync();
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public async Task<IList<ShopDto>> GetShopList()
        {
            var result = new List<ShopDto>();
            try
            {
                var query = await (from shop in _shopDbContext.Shop.AsNoTracking()
                                   join bat in _shopDbContext.GoodsPickingBatch
                                   on shop.ShopId equals bat.ShopId into tmp
                                   from t in tmp.DefaultIfEmpty()
                                   where (shop.CourseTypeIds == "2561" || shop.CourseTypeIds == "2561,")
                                   && shop.Astatus == 0
                                   && shop.IsEnable == true
                                   select new ShopDto
                                   {
                                       ShopId = shop.ShopId,
                                       ShopName = shop.ShopName,
                                       TotalAmount = 0,
                                       PickTime = t != null ? t.PickTime : DateTime.Now
                                   }).DistinctByAsync(a => a.ShopId); ;


                query.ForEach(a => a.TotalAmount = GetTotalSale(a));

                return query;
            }
            catch(Exception e)
            {
                throw e;
            }
            

        //    try
        //    {
        //        var first = _shopDbContext.GoodsPickingBatch.FirstOrDefault();
        //        //第一次捡货
        //        if (first == null)
        //        {
        //            result = await (from shop in _shopDbContext.Shop.AsNoTracking()
        //                            where (shop.CourseTypeIds == "2561" || shop.CourseTypeIds == "2561,")
        //                            && shop.Astatus == 0
        //                            && shop.IsEnable== true
        //                            select new ShopDto
        //                            {
        //                                ShopId = shop.ShopId,
        //                                ShopName = shop.ShopName,
        //                                TotalAmount = 0,
        //                                PickTime = DateTime.Now
        //                            }).ToListAsync();

        //        }
        //        else
        //        {
        //            /*
        //             销售额：（上一次拣货时间 到 当前时间） 这段时间内的每个商铺售卖的商铺总价
                     
        //             */

        //            var sql = @"SELECT * FROM
        //                        (SELECT  ROW_NUMBER() OVER (PARTITION BY s.shopID ORDER BY b.PickTime DESC) AS Id
        //                        ,s.shopID,s.shopName,b.PickTime,b.PickManId,b.PickMan
        //                        ,(SELECT SUM(sub.PurchasePrice * sub.Quantity) AS TotalAmount　
        //                            FROM dbo.OrderItemDetails AS sub
								//	INNER JOIN dbo.OrderForm AS main
								//	ON main.orderCode = sub.OrderCode
								//	WHERE main.status=4
								//	AND main.shopID = s.shopID
								//	AND dt BETWEEN b.PickTime AND GETDATE()) AS TotalAmount
        //                        FROM dbo.Shop AS s
        //                        LEFT OUTER JOIN dbo.GoodsPickingBatch AS b 
        //                        ON b.ShopID = s.shopID
        //                        WHERE s.courseTypeIds='2561'
								//AND s.isenable = 1
        //                        ) AS tmp 
        //                        WHERE tmp.Id=1";
        //            result = await _shopDbContext.Set<ShopDto>()
        //                            .FromSql<ShopDto>(sql)
        //                            .AsNoTracking()
        //                            .ToListAsync();


        //        }

        //        return result;

        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        }



        private decimal GetTotalSale(ShopDto dto)
        {
            var query = (from m in _shopDbContext.OrderForm
                         join sub in _shopDbContext.OrderItemDetails
                         on m.OrderCode equals sub.OrderCode
                         where m.Status==4
                         && m.ShopId==dto.ShopId
                         && sub.Dt>=dto.PickTime
                         && sub.Dt<=DateTime.Now
                         select sub.Quantity * sub.PurchasePrice).Sum();
            return query ?? 0;
        }



        public async Task<IList<DeliveryShopDto>> GetDeliverShopList()
        {
            var result = new List<DeliveryShopDto>();
            try
            {
                result =await (from s in _shopDbContext.Shop.AsNoTracking()
                               join bat in _shopDbContext.GoodsPickingBatch.AsNoTracking()
                             on s.ShopId equals bat.ShopId into tmp
                             from t in tmp.DefaultIfEmpty()
                               let deliver = (_shopDbContext.UserBelongToShop.FirstOrDefault(a => a.ShopId == s.ShopId))
                               where (s.CourseTypeIds == "2561" || s.CourseTypeIds == "2561,")
                               && s.Astatus == 0
                             && s.IsEnable == true
                               select new DeliveryShopDto
                                {
                                    ShopId = s.ShopId,
                                    ShopName = s.ShopName,
                                    Distance = "定位失败！",
                                    DeliveryStatus = t != null ? t.DeliveryStatus : 0,
                                    DeliveryTime = t != null ? t.PickTime : DateTime.Now,
                                    DeliveryManId = deliver!=null?deliver.UserId:null,
                                    DeliveryMan = deliver!=null?(_shopDbContext.ShopUserInfo.FirstOrDefault(a=>a.UserId==deliver.UserId && a.RoleId==3).UserName):null
                                    //DeliveryMan = (from a in _shopDbContext.ShopUserInfo.AsNoTracking()
                                    //            join b in _shopDbContext.UserBelongToShop.AsNoTracking()
                                    //            on a.UserId equals b.UserId
                                    //            where a.RoleId == 3
                                    //            && b.ShopId == s.ShopId
                                    //            select a.UserName).FirstOrDefault()
                                }).DistinctByAsync(a=>a.ShopId);


                result.ForEach(a => a.Surplus = SetSurplus(a));




                //var first = _shopDbContext.GoodsPickingBatch.FirstOrDefault();
                ////第一次配送
                //if (first == null)
                //{
                //    result = await (from shop in _shopDbContext.Shop.AsNoTracking()
                //                    where (shop.CourseTypeIds == "2561" || shop.CourseTypeIds == "2561,")
                //                    && shop.Astatus == 1
                //                    select new DeliveryShopDto
                //                    {
                //                        DeliveryStatus = 0,
                //                        ShopId = shop.ShopId,
                //                        ShopName = shop.ShopName,
                //                        Surplus = 0,
                //                        Distance = "获取定位失败！",
                //                    }).ToListAsync();

                //}
                //else
                //{

                //    var sql = @"SELECT *
                //                 FROM
	               //                 (
	               //                 SELECT  ROW_NUMBER() OVER (PARTITION BY s.shopID ORDER BY b.OperationDateTime DESC) AS Id
	               //                 ,ISNULL(g.DeliveryStatus,0) as DeliveryStatus
	               //                 ,s.shopID,s.shopName,b.OperationDateTime as DeliveryTime
	               //                 ,b.DeliveryManId,b.DeliveryMan
	               //                 ,(SELECT SUM(p.Price * d.PickAmount)
		              //                  FROM dbo.ProductLibrary AS p
		              //                  INNER JOIN dbo.GoodsPickingDetail AS d
		              //                  ON p.ProductId=d.ProductID
		              //                  WHERE d.PickBatchID = b.ID) AS Surplus
	               //                 FROM dbo.Shop AS s
		              //                  LEFT OUTER JOIN dbo.BoutiqueOperationLog AS b 
		              //                  ON b.ShopID = s.shopID
		              //                  LEFT OUTER JOIN dbo.GoodsPickingBatch AS g
		              //                  ON b.ShopID = g.shopID
	               //                 WHERE s.courseTypeIds='2561'
                //                ) AS tmp 
                //                WHERE tmp.Id=1";
                //    result = await _shopDbContext.Set<DeliveryShopDto>()
                //                    .FromSql<DeliveryShopDto>(sql)
                //                    .AsNoTracking()
                //                    .ToListAsync();

                //}

                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="productId">商铺Id</param>
        /// <param name="batchId">捡货批次</param>
        /// <returns></returns>
        private decimal GetTotal(int shopId, string batchId)
        {
            decimal total = 0;
            //商铺某一批次捡货的产品和数量
            var productListInShop = (from main in _shopDbContext.GoodsPickingBatch.AsNoTracking()
                                     join sub in _shopDbContext.GoodsPickingDetail.AsNoTracking()
                                     on main.Id equals sub.PickBatchId
                                     where sub.PickBatchId == batchId
                                     select new
                                     {
                                         sub.ProductId,
                                         sub.PickAmount
                                     }).ToList();


            foreach (var x in productListInShop)
            {
                var price = _shopDbContext.ProductLibrary.AsNoTracking()
                            .FirstOrDefault(a => a.SpId == shopId && a.ProductId == x.ProductId)?.Price;

                total += Convert.ToDecimal(x.PickAmount * price);
            }


            return total;
        }

        private decimal? SetSurplus(DeliveryShopDto obj)
        {
            try
            {
                
                var tmp = 
                    (from p in _shopDbContext.ProductLibrary.AsNoTracking()
                                join px in _shopDbContext.ProductExtense.AsNoTracking()
                                on p.ProductId equals px.ProductId
                                where p.SpId == obj.ShopId
                                select new { px.CurrentCount, p.Price,px.TotalCount}).ToList();


                decimal fullSum = 0;
                decimal storeSum = 0;
                if (tmp!=null && tmp.Any())
                {
                    foreach(var x in tmp)
                    {
                        fullSum += Convert.ToDecimal(x.TotalCount * x.Price);
                        storeSum += Convert.ToDecimal(x.CurrentCount * x.Price);
                    }
                    if (fullSum != 0)
                    {
                        //结果在前端加% 即可
                        var c = storeSum * 100 / fullSum;
                        return obj.Surplus = Math.Round(c,2);
                    }
                    else
                    {
                        return obj.Surplus = 0;
                    }
                }

                return obj.Surplus = 0;
                //var fullSum = (from px in _shopDbContext.ProductExtense.AsNoTracking()
                //               join p in _shopDbContext.ProductLibrary.AsNoTracking()
                //               on px.ProductId equals p.ProductId
                //               where px.ShopId == obj.ShopId
                //               select px.TotalCount * p.Price).Sum();
                //return obj.Surplus = fullSum != 0 ? Math.Round(decimal.Parse((storeSum * 100 / fullSum).ToString()), 2) : 0;
                //return obj.Surplus = fullSum;
            }
            catch (Exception e)
            {
                throw e;
            }
            
        }

    }
}
