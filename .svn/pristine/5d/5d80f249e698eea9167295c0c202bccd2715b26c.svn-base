using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using MC.NetCore.DomainModels.Dto;
using MC.NetCore.DataAccessSqlServerProvider;
using MC.NetCore.DomainModels;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using MC.NetCore.Common.Extensions;
using MC.NetCore.Repository.Enums;

namespace MC.NetCore.Repository
{
    public class ProductRepository :Repository<ProductLibrary>, IProductRepository,IDisposable
    {
        private readonly ShopDbContext _shopDbContext;
        public ProductRepository(ShopDbContext shopDbContext)
        {
            _shopDbContext = shopDbContext;
        }

        public async Task<IList<ProductLibrary>> GetProductListByShopId(HashSet<int> shopIds)
        {        
            return await (from p in _shopDbContext.ProductLibrary.AsNoTracking()
                          where shopIds.Contains(p.SpId.HasValue ? p.SpId.Value : 0)
                          select p).ToListAsync();
        }

        public async Task<ProductLibrary> GetProductListByProductId(int productId)
        {
            return await (from p in _shopDbContext.ProductLibrary.AsNoTracking()
                          where productId == p.ProductId
                          select p).FirstOrDefaultAsync();
        }

        public async Task<IList<DeliveryProductDto>> GetDeliveryProductList(int shopId)
        {
            var productList =await (from p in _shopDbContext.ProductLibrary.AsNoTracking()
                               join px in _shopDbContext.ProductExtense.AsNoTracking()
                               on p.ProductId equals px.ProductId
                               where px.ShopId == shopId
                               && px.ShopId == p.ProductId
                               && p.Astatus == 0
                               && p.IsAvailable == true
                               select new DeliveryProductDto
                               {
                                   ProductId = p.ProductId,
                                   ProductName = p.ProductName,
                                   FullAmount =  px.TotalCount.Value,
                                   RemainderAmount = px.CurrentCount.Value,
                                   RecommendOnShelvesAmount = 0
                               }).DistinctByAsync(a=>a.ProductId);

            productList.ForEach(a=>a.RecommendOnShelvesAmount= SetRecommendOnShelvesAmount(a.ProductId));


            return productList;
        }



        private int SetRecommendOnShelvesAmount(int productId)
        {
            var tmp = (from bat in _shopDbContext.GoodsPickingBatch.AsNoTracking()
                       join d in _shopDbContext.GoodsPickingDetail.AsNoTracking()
                       on bat.Id equals d.PickBatchId
                       where bat.DeliveryStatus==(int)DeliveryStatusEnum.PickUped
                       && d.ProductId== productId
                       select d.PickAmount).Sum();
            return tmp;
        }


        public async Task<IList<ProductDto>> GetProductList(int shopId, DateTime? lastPickTime, DateTime? pickTime)
        {
            var query =await (from p in _shopDbContext.ProductLibrary.AsNoTracking()
                         where p.SpId == shopId
                         && p.Astatus==0
                         && p.IsAvailable == true
                         
                         group p by p.ProductId into g
                         let pId = g.Key
                         //售卖
                         let saleSum = (lastPickTime != null) ? (_shopDbContext.OrderItemDetails
                                                .Where(a => a.ProductId == pId)
                                                .Where(a => a.Dt >= lastPickTime && a.Dt <= pickTime)
                                                .Sum(a => a.Quantity).Value) : 0
                              //丢失
                              let lostSum = (lastPickTime != null) ? (_shopDbContext.BoutiqueOperationLog
                                                    .Where(a => a.ProductId == pId)
                                                    .Where(a => a.OperationDateTime >= lastPickTime)
                                                    .Where(a=>a.OperationType== (int)OperationTypeEnum.CheckStore)
                                                    .Sum(a => a.LostCount).Value) : 0
                              //损耗
                              let wastageSum = (lastPickTime != null) ? (_shopDbContext.BoutiqueOperationLog
                                                .Where(a => a.ProductId == pId)
                                                .Where(a => a.OperationDateTime >= lastPickTime)
                                                .Where(a => a.OperationType == (int)OperationTypeEnum.OffShelves)
                                                .Sum(a => a.ChangeCount).Value) : 0

                              let productPickCount = (lastPickTime != null) ? (_shopDbContext.OrderItemDetails
                                                .Where(a => a.ProductId == pId)
                                                .Where(a => a.Dt >= lastPickTime && a.Dt <= pickTime)
                                                .Sum(a => a.Quantity).Value) : 0
                              let havePickedupCount = (lastPickTime != null) ? ( (from singleBatch in _shopDbContext.GoodsPickingBatch
                                                        join detail in _shopDbContext.GoodsPickingDetail on singleBatch.Id equals detail.PickBatchId
                                                        where detail.ProductId == pId && singleBatch.PickupType == 2
                                                        select detail.PickAmount).Sum()
                                                    ) : 0
                              select new ProductDto
                             {
                                 ProductId = g.Key,
                                 ProductName = (_shopDbContext.ProductLibrary   
                                                    .FirstOrDefault(a=>a.ProductId==g.Key).ProductName),
                                 //AllSaleAmount = (lastPickTime != null)?(_shopDbContext.OrderItemDetails
                                 //                   .Where(a => a.ProductId == pId)
                                 //                   .Where(a =>a.Dt >= lastPickTime && a.Dt <= pickTime)
                                 //                   .Sum(a => a.Quantity).Value):0,
                                 AllSaleAmount = saleSum+ lostSum+ wastageSum -havePickedupCount,
                                 PickAmount = saleSum + lostSum + wastageSum - havePickedupCount,
                             }).ToListAsync();
            return query; 
        }
    }
}
